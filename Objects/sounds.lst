C251 COMPILER V5.04b,  sounds                                                              22/12/24  10:45:12  PAGE 1   


C251 COMPILER V5.04b, COMPILATION OF MODULE sounds
OBJECT MODULE PLACED IN .\Objects\sounds.obj
COMPILER INVOKED BY: D:\Compiler\Keil_v5\C251\BIN\C251.EXE Src\sounds.c XSMALL FUNCTIONS(REENTRANT) WARNINGLEVEL(3) OPTI
                    -MIZE(3,SPEED) BROWSE ORDER INCDIR(.\Inc;.\Mcu\8051u\Inc) INTVECTOR(0X1000) DEBUG PRINT(.\Objects\sounds.lst) TABS(2) OBJ
                    -ECT(.\Objects\sounds.obj) 

stmt  level    source

    1          #include "sounds.h"
    2          #include "targets.h"
    3          #include "functions.h"
    4          #include "eeprom.h"
    5          #include "phaseouts.h"
    6          #include "peripherals.h"
    7          
    8          uint8_t xdata beep_volume = 5;
    9          
   10          void pause(uint16_t ms) {
   11   1        SET_DUTY_CYCLE_ALL(0);
   12   1        delayMillis(ms);
   13   1        SET_DUTY_CYCLE_ALL(beep_volume); // volume of the beep, (duty cycle) don't go
   14   1                         // above 25 out of 2000
   15   1      }
   16          
   17          void setVolume(uint8_t volume) {
   18   1        if (volume > 11) {
   19   2          volume = 11;
   20   2        }
   21   1        beep_volume = volume * 2; // volume variable from 0 - 11 equates to CCR value of 0-22
   22   1      }
   23          
   24          void setCaptureCompare(void) {
   25   1        SET_DUTY_CYCLE_ALL(beep_volume); // volume of the beep, (duty cycle) don't go
   26   1                         // above 25 out of 2000
   27   1      }
   28          
   29          void playBJNote(uint16_t freq, uint16_t bduration) { // hz and ms
   30   1        uint16_t timerOne_reload = PWM_AUTORELOAD;
   31   1      
   32   1        SET_PRESCALER_PWM(10);
   33   1        timerOne_reload = CPU_FREQUENCY_MHZ * 100000 / freq;
   34   1      
   35   1        SET_AUTO_RELOAD_PWM(timerOne_reload);
   36   1        SET_DUTY_CYCLE_ALL(beep_volume * timerOne_reload / PWM_AUTORELOAD); // volume of the beep, (duty cycle) 
             -don't
*** WARNING C188 IN LINE 36 OF Src\sounds.c: 'parameter 1': value truncated
   37   1                                          // go above 25 out of 2000
   38   1        delayMillis(bduration);
   39   1      }
   40          
   41          uint16_t getBlueJayNoteFrequency(uint8_t bjarrayfreq) {
   42   1        return 10000000 / (bjarrayfreq * 247 + 4000);
   43   1      }
   44          
   45          void playBlueJayTune(void) {
   46   1        uint16_t i;
   47   1        uint8_t full_time_count = 0;
   48   1        uint16_t duration;
   49   1        uint16_t frequency;
   50   1        (*comStep[2])();
   51   1        // read_flash_bin(blueJayTuneBuffer , eeprom_address + 48 , 128);
   52   1        for (i = 52; i < 176; i += 2) {
   53   2          RELOAD_WATCHDOG_COUNTER();
   54   2          signaltimecounter = 0;
   55   2      
C251 COMPILER V5.04b,  sounds                                                              22/12/24  10:45:12  PAGE 2   

   56   2          if (eepromBuffer[i] == 255) {
   57   3            full_time_count++;
   58   3      
   59   3          } else {
   60   3            if (eepromBuffer[i + 1] == 0) {
   61   4              duration = full_time_count * 254 + eepromBuffer[i];
   62   4              SET_DUTY_CYCLE_ALL(0);
   63   4              delayMillis(duration);
   64   4            } else {
   65   4              frequency = getBlueJayNoteFrequency(eepromBuffer[i + 1]);
   66   4              duration = ((full_time_count * 254 + eepromBuffer[i])
   67   4                  * (100000 / frequency)) / 100;
   68   4              playBJNote(frequency, duration);
   69   4            }
   70   3            full_time_count = 0;
   71   3          }
   72   2        }
   73   1        allOff(); // turn all channels low again
   74   1        SET_PRESCALER_PWM(0); // set prescaler back to 0.
   75   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
   76   1        signaltimecounter = 0;
   77   1        RELOAD_WATCHDOG_COUNTER();
   78   1      }
   79          
   80          void playStartupTune(void) {
   81   1        uint8_t value = *(unsigned char far*)(eeprom_address + 48);
   82   1        __disable_irq();
   83   1        if (value != 0xFF) {
   84   2          playBlueJayTune();
   85   2        } else {
   86   2          SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
   87   2          setCaptureCompare();
   88   2          (*comStep[2])(); // activate a pwm channel
   89   2          SET_PRESCALER_PWM(55); // frequency of beep
   90   2          delayMillis(200); // duration of beep
   91   2      
   92   2          (*comStep[4])();
   93   2          SET_PRESCALER_PWM(40); // next beep is higher frequency
   94   2          delayMillis(200);
   95   2      
   96   2          (*comStep[5])();
   97   2          SET_PRESCALER_PWM(25); // higher again..
   98   2          delayMillis(200);
   99   2      
  100   2          allOff(); // turn all channels low again
  101   2          SET_PRESCALER_PWM(0); // set prescaler back to 0.
  102   2          signaltimecounter = 0;
  103   2        }
  104   1      
  105   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  106   1        __enable_irq();
  107   1      }
  108          
  109          void playBrushedStartupTune(void) {
  110   1        __disable_irq();
  111   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  112   1        setCaptureCompare();
  113   1        (*comStep[0])(); // activate a pwm channel
  114   1        SET_PRESCALER_PWM(40); // frequency of beep
  115   1        delayMillis(300); // duration of beep
  116   1        (*comStep[1])(); // activate a pwm channel
  117   1        SET_PRESCALER_PWM(30); // frequency of beep
  118   1        delayMillis(300); // duration of beep
  119   1        (*comStep[2])();// activate a pwm channel
  120   1        SET_PRESCALER_PWM(25); // frequency of beep
  121   1        delayMillis(300); // duration of beep
C251 COMPILER V5.04b,  sounds                                                              22/12/24  10:45:12  PAGE 3   

  122   1        (*comStep[3])();
  123   1        SET_PRESCALER_PWM(20); // higher again..
  124   1        delayMillis(300);
  125   1        allOff(); // turn all channels low again
  126   1        SET_PRESCALER_PWM(0); // set prescaler back to 0.
  127   1        signaltimecounter = 0;
  128   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  129   1        __enable_irq();
  130   1      }
  131          
  132          void playDuskingTune(void) {
  133   1        setCaptureCompare();
  134   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  135   1        (*comStep[1])(); // activate a pwm channel
  136   1        SET_PRESCALER_PWM(60); // frequency of beep
  137   1        delayMillis(200); // duration of beep
  138   1        SET_PRESCALER_PWM(55); // next beep is higher frequency
  139   1        delayMillis(150);
  140   1        SET_PRESCALER_PWM(50); // higher again..
  141   1        delayMillis(150);
  142   1        SET_PRESCALER_PWM(45); // frequency of beep
  143   1        delayMillis(100); // duration of beep
  144   1        SET_PRESCALER_PWM(50); // next beep is higher frequency
  145   1        delayMillis(100);
  146   1        SET_PRESCALER_PWM(55); // higher again..
  147   1        delayMillis(100);
  148   1        SET_PRESCALER_PWM(25); // higher again..
  149   1        delayMillis(200);
  150   1        SET_PRESCALER_PWM(55); // higher again..
  151   1        delayMillis(150);
  152   1        allOff(); // turn all channels low again
  153   1        SET_PRESCALER_PWM(0); // set prescaler back to 0.
  154   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  155   1      }
  156          
  157          void playInputTune2(void) {
  158   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  159   1        __disable_irq();
  160   1        RELOAD_WATCHDOG_COUNTER();
  161   1        SET_PRESCALER_PWM(60);
  162   1        setCaptureCompare();
  163   1        (*comStep[0])();
  164   1        delayMillis(75);
  165   1        SET_PRESCALER_PWM(80);
  166   1        delayMillis(75);
  167   1        SET_PRESCALER_PWM(90);
  168   1        RELOAD_WATCHDOG_COUNTER();
  169   1        delayMillis(75);
  170   1        allOff();
  171   1        SET_PRESCALER_PWM(0);
  172   1        signaltimecounter = 0;
  173   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  174   1        __enable_irq();
  175   1      }
  176          
  177          void playInputTune(void) {
  178   1        __disable_irq();
  179   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  180   1        RELOAD_WATCHDOG_COUNTER();
  181   1        SET_PRESCALER_PWM(80);
  182   1        setCaptureCompare();
  183   1        (*comStep[2])();
  184   1        delayMillis(100);
  185   1        SET_PRESCALER_PWM(70);
  186   1        delayMillis(100);
  187   1        SET_PRESCALER_PWM(40);
C251 COMPILER V5.04b,  sounds                                                              22/12/24  10:45:12  PAGE 4   

  188   1        delayMillis(100);
  189   1        allOff();
  190   1        SET_PRESCALER_PWM(0);
  191   1        signaltimecounter = 0;
  192   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  193   1        __enable_irq();
  194   1      }
  195          
  196          void playDefaultTone(void) {
  197   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  198   1        SET_PRESCALER_PWM(50);
  199   1        setCaptureCompare();
  200   1        (*comStep[2])();
  201   1        delayMillis(150);
  202   1        RELOAD_WATCHDOG_COUNTER();
  203   1        SET_PRESCALER_PWM(30);
  204   1        delayMillis(150);
  205   1        allOff();
  206   1        SET_PRESCALER_PWM(0);
  207   1        signaltimecounter = 0;
  208   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  209   1      }
  210          
  211          void playChangedTone(void) {
  212   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  213   1        SET_PRESCALER_PWM(40);
  214   1        setCaptureCompare();
  215   1        (*comStep[1])();
  216   1        delayMillis(150);
  217   1        RELOAD_WATCHDOG_COUNTER();
  218   1        SET_PRESCALER_PWM(80);
  219   1        delayMillis(150);
  220   1        allOff();
  221   1        SET_PRESCALER_PWM(0);
  222   1        signaltimecounter = 0;
  223   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  224   1      }
  225          
  226          void playBeaconTune3(void) {
  227   1        static int8_t xdata i;
  228   1        SET_AUTO_RELOAD_PWM(PWM_AUTORELOAD);
  229   1        __disable_irq();
  230   1        setCaptureCompare();
  231   1        for (i = 119; i > 0; i = i - 2) {
  232   2          RELOAD_WATCHDOG_COUNTER();
  233   2          (*comStep[i / 20])();
  234   2          SET_PRESCALER_PWM(10 + (i / 2));
  235   2          delayMillis(10);
  236   2        }
  237   1        allOff();
  238   1        SET_PRESCALER_PWM(0);
  239   1        signaltimecounter = 0;
  240   1        SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  241   1        __enable_irq();
  242   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1224     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         2     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
C251 COMPILER V5.04b,  sounds                                                              22/12/24  10:45:12  PAGE 5   

  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
