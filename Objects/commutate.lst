C251 COMPILER V5.04b,  commutate                                                           22/12/24  10:45:12  PAGE 1   


C251 COMPILER V5.04b, COMPILATION OF MODULE commutate
OBJECT MODULE PLACED IN .\Objects\commutate.obj
COMPILER INVOKED BY: D:\Compiler\Keil_v5\C251\BIN\C251.EXE Mcu\8051u\Src\commutate.c XSMALL FUNCTIONS(REENTRANT) WARNING
                    -LEVEL(3) OPTIMIZE(3,SPEED) BROWSE ORDER INCDIR(.\Inc;.\Mcu\8051u\Inc) INTVECTOR(0X1000) DEBUG PRINT(.\Objects\commutate.
                    -lst) TABS(2) OBJECT(.\Objects\commutate.obj) 

stmt  level    source

    1          /*
    2           * comparator.c
    3           *
    4           *  Created on: 2024年12月1日
    5           *      Author: 17263
    6           */
    7          #include "input.h"
    8          #include "main.h"
    9          #include "eeprom.h"
   10          #include "phaseouts.h"
   11          #include "commutate.h"
   12          #include "peripherals.h"
   13          
   14          int8_t  step = 0;       //换相步骤
   15          uint8_t forward = 1;      //正转
   16          uint8_t rising = 0;       //上升沿
   17          uint8_t filter_level = 0;     //滤波等级
   18          uint8_t desync_check;       //失步检查
   19          uint8_t desync_happened = 0;  //失步标志
   20          uint8_t prop_brake_active = 0;  //比例制动激活
   21          uint8_t old_routine = 0;    //旧周期
   22          
   23          uint8_t stuckcounter = 0;     //卡住计数器
   24          uint8_t bemfcounter = 0;    //BEMF计数器
   25          uint8_t min_bemf_counts_up = TARGET_MIN_BEMF_COUNTS;
   26          uint8_t min_bemf_counts_down = TARGET_MIN_BEMF_COUNTS;
   27          uint8_t bemf_timeout = 10;        //BEMF超时
   28          uint8_t bemf_timeout_happened = 0;    //BEMF超时标志
   29          uint8_t bad_count = 0;      //坏计数
   30          uint8_t bad_count_threshold = CPU_FREQUENCY_MHZ / 24; //坏计数阈值
   31          
   32          uint8_t zcfound = 0;      //零交叉发现
   33          uint16_t thiszctime;      //当前零交叉时间
   34          uint16_t zero_crosses;      //零交叉
   35          
   36          uint8_t temp_advance = 2;   //临时提前
   37          uint8_t auto_advance_level;   //自动提前等级
   38          uint16_t advance;         //提前
   39          uint16_t waitTime;        //换相等待时间
   40          uint16_t average_interval;      //平均间隔
   41          uint16_t last_average_interval;
   42          uint16_t commutation_interval = 12500;    //换相间隔
   43          uint16_t commutation_intervals[6] = { 0 };  //换相间隔数组
   44          uint16_t last_commutation_interval;   
   45          
   46          uint16_t step_delay = 100;
   47          uint8_t stepper_sine = 0;
   48          uint8_t changeover_step = 4;
   49          uint8_t do_once_sinemode;
   50          int16_t phase_A_position;
   51          int16_t phase_B_position;
   52          int16_t phase_C_position;
   53          
   54          int32_t xdata pwmSin[] = { 180, 183, 186, 189, 193, 196, 199, 202, 205, 208,
   55              211, 214, 217, 220, 224, 227, 230, 233, 236, 239, 242, 245, 247, 250,
   56              253, 256, 259, 262, 265, 267, 270, 273, 275, 278, 281, 283, 286, 288,
   57              291, 293, 296, 298, 300, 303, 305, 307, 309, 312, 314, 316, 318, 320,
C251 COMPILER V5.04b,  commutate                                                           22/12/24  10:45:12  PAGE 2   

   58              322, 324, 326, 327, 329, 331, 333, 334, 336, 337, 339, 340, 342, 343,
   59              344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 355, 356, 357,
   60              357, 358, 358, 359, 359, 359, 360, 360, 360, 360, 360, 360, 360, 360,
   61              360, 359, 359, 359, 358, 358, 357, 357, 356, 355, 355, 354, 353, 352,
   62              351, 350, 349, 348, 347, 346, 344, 343, 342, 340, 339, 337, 336, 334,
   63              333, 331, 329, 327, 326, 324, 322, 320, 318, 316, 314, 312, 309, 307,
   64              305, 303, 300, 298, 296, 293, 291, 288, 286, 283, 281, 278, 275, 273,
   65              270, 267, 265, 262, 259, 256, 253, 250, 247, 245, 242, 239, 236, 233,
   66              230, 227, 224, 220, 217, 214, 211, 208, 205, 202, 199, 196, 193, 189,
   67              186, 183, 180, 177, 174, 171, 167, 164, 161, 158, 155, 152, 149, 146,
   68              143, 140, 136, 133, 130, 127, 124, 121, 118, 115, 113, 110, 107, 104,
   69              101, 98, 95, 93, 90, 87, 85, 82, 79, 77, 74, 72, 69, 67, 64, 62, 60, 57,
   70              55, 53, 51, 48, 46, 44, 42, 40, 38, 36, 34, 33, 31, 29, 27, 26, 24, 23,
   71              21, 20, 18, 17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 5, 4, 3, 3, 2, 2,
   72              1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7,
   73              8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 26, 27, 29, 31,
   74              33, 34, 36, 38, 40, 42, 44, 46, 48, 51, 53, 55, 57, 60, 62, 64, 67, 69,
   75              72, 74, 77, 79, 82, 85, 87, 90, 93, 95, 98, 101, 104, 107, 110, 113,
   76              115, 118, 121, 124, 127, 130, 133, 136, 140, 143, 146, 149, 152, 155,
   77              158, 161, 164, 167, 171, 174, 177
   78          };
   79          
   80          void commutate(void){
   81   1        if (forward) {
   82   2          step++;
   83   2          if (step > 5) {
   84   3            step = 0;
   85   3            desync_check = 1;
   86   3          }
   87   2          rising = step % 2;
   88   2        } else {
   89   2          step--;
   90   2          if (step < 0) {
   91   3            step = 5;
   92   3            desync_check = 1;
   93   3          }
   94   2          rising = !(step % 2);
   95   2        }
   96   1        __disable_irq();
   97   1        if (!prop_brake_active) {
   98   2          (*comStep[step])();
   99   2        }
  100   1        __enable_irq();
  101   1      
  102   1        if (rising) {
  103   2          ENABLE_FALL_INTERRUPT();
  104   2        } else {
  105   2          ENABLE_RISE_INTERRUPT();
  106   2        }
  107   1      
  108   1        if (average_interval > 1700) {
  109   2          old_routine = 1;
  110   2        }
  111   1        bemfcounter = 0;
  112   1        zcfound = 0;
  113   1        commutation_intervals[step] = commutation_interval;
  114   1      }
  115          
  116          void interruptRoutine(void) {
  117   1        static uint8_t i;
  118   1        if (average_interval > 125) {
  119   2          if ((INTERVAL_TIMER_COUNT < 125) && (duty_cycle < 600)&& (zero_crosses < 500)) { // should be impossibl
             -e, desync?exit anyway
  120   3            return;
  121   3          }
  122   2          stuckcounter++; // stuck at 100 interrupts before the main loop happens
C251 COMPILER V5.04b,  commutate                                                           22/12/24  10:45:12  PAGE 3   

  123   2                  // again.
  124   2          if (stuckcounter > 100) {
  125   3            maskPhaseInterrupts();
  126   3            zero_crosses = 0;
  127   3            return;
  128   3          }
  129   2        }
  130   1        for (i = 0; i < filter_level; i++) {
  131   2          if (getCompOutputLevel() == rising) {
  132   3            return;
  133   3          }
  134   2        }
  135   1        __disable_irq();
  136   1        maskPhaseInterrupts();
  137   1        thiszctime = INTERVAL_TIMER_COUNT;
  138   1        SET_INTERVAL_TIMER_COUNT(0);
  139   1      
  140   1        SET_AND_ENABLE_COM_INT(waitTime+1);// enable COM_TIMER interrupt
  141   1        __enable_irq();
  142   1      }
  143          
  144          
  145          void PeriodElapsedCallback(void) {
  146   1        DISABLE_COM_TIMER_INT(); // disable interrupt
  147   1        commutate();
  148   1        commutation_interval = (3 * commutation_interval + thiszctime) >> 2;
  149   1        if (!AUTO_ADVANCE) {
  150   2          advance = (commutation_interval >> 3) * temp_advance; // 60 divde 8 7.5 degree increments
  151   2        } else {
  152   2          advance = (commutation_interval * auto_advance_level) >> 6; // 60 divde 64 0.9375 degree increments
  153   2        }
  154   1        waitTime = (commutation_interval >> 1) - advance;
  155   1        if (!old_routine) {
  156   2          enableCompInterrupts();
  157   2        }
  158   1        if (zero_crosses < 10000) {
  159   2          zero_crosses++;
  160   2        }
  161   1      }
  162          
  163          void zcfoundroutine(void) { // only used in polling mode, blocking routine.
  164   1        thiszctime = INTERVAL_TIMER_COUNT;
  165   1        SET_INTERVAL_TIMER_COUNT(0);
  166   1        commutation_interval = (thiszctime + (3 * commutation_interval)) / 4;
  167   1        advance = (commutation_interval >> 3) * 2; //   7.5 degree increments
  168   1        waitTime = commutation_interval / 2 - advance;
  169   1      
  170   1        while ((INTERVAL_TIMER_COUNT) < (waitTime)) {
  171   2          if (zero_crosses < 5) {
  172   3            break;
  173   3          }
  174   2        }
  175   1        TMR0_RELOAD(waitTime + 1); // enable COM_TIMER interrupt
  176   1        commutate();
  177   1        bemfcounter = 0;
  178   1        bad_count = 0;
  179   1      
  180   1        zero_crosses++;
  181   1        if (STALL_PROTECTION || RC_CAR_REVERSE) {
  182   2          if (zero_crosses >= 20 && commutation_interval <= 2000) {
  183   3            old_routine = 0;
  184   3            enableCompInterrupts(); // enable interrupt
  185   3          }
  186   2        } else {
  187   2          if (commutation_interval < 1300) {
  188   3            old_routine = 0;
C251 COMPILER V5.04b,  commutate                                                           22/12/24  10:45:12  PAGE 4   

  189   3            enableCompInterrupts(); // enable interrupt
  190   3          }
  191   2        }
  192   1      }
  193          
  194          void getBemfState(void) {
  195   1        static uint8_t current_state = 0;
  196   1        current_state = !getCompOutputLevel(); // polarity reversed
  197   1        if (rising) {
  198   2          if (current_state) {
  199   3            bemfcounter++;
  200   3          } else {
  201   3            bad_count++;
  202   3            if (bad_count > bad_count_threshold) {
  203   4              bemfcounter = 0;
  204   4            }
  205   3          }
  206   2        } else {
  207   2          if (!current_state) {
  208   3            bemfcounter++;
  209   3          } else {
  210   3            bad_count++;
  211   3            if (bad_count > bad_count_threshold) {
  212   4              bemfcounter = 0;
  213   4            }
  214   3          }
  215   2        }
  216   1      }
  217          
  218          void advanceincrement(void) {
  219   1        static int32_t xdata compareone;
  220   1        static int32_t xdata comparetwo;
  221   1        static int32_t xdata comparethree;
  222   1        if (forward) {
  223   2          phase_A_position++;
  224   2          if (phase_A_position > 359) {
  225   3            phase_A_position = 0;
  226   3          }
  227   2          phase_B_position++;
  228   2          if (phase_B_position > 359) {
  229   3            phase_B_position = 0;
  230   3          }
  231   2          phase_C_position++;
  232   2          if (phase_C_position > 359) {
  233   3            phase_C_position = 0;
  234   3          }
  235   2        } else {
  236   2          phase_A_position--;
  237   2          if (phase_A_position < 0) {
  238   3            phase_A_position = 359;
  239   3          }
  240   2          phase_B_position--;
  241   2          if (phase_B_position < 0) {
  242   3            phase_B_position = 359;
  243   3          }
  244   2          phase_C_position--;
  245   2          if (phase_C_position < 0) {
  246   3            phase_C_position = 359;
  247   3          }
  248   2        }
  249   1      
  250   1        compareone = (((2 * pwmSin[phase_A_position] / SINE_DIVIDER) + DEAD_TIME) * PWM_MAX_ARR / 2000) * SINE_M
             -ODE_POWER / 10;
  251   1        comparetwo = (((2 * pwmSin[phase_B_position] / SINE_DIVIDER) + DEAD_TIME) * PWM_MAX_ARR / 2000) * SINE_M
             -ODE_POWER / 10;
  252   1        comparethree = (((2 * pwmSin[phase_C_position] / SINE_DIVIDER) + DEAD_TIME) * PWM_MAX_ARR / 2000) * SINE
C251 COMPILER V5.04b,  commutate                                                           22/12/24  10:45:12  PAGE 5   

             -_MODE_POWER / 10;
  253   1      
  254   1        setPWMCompare1(compareone);
*** WARNING C188 IN LINE 254 OF Mcu\8051u\Src\commutate.c: 'parameter 1': value truncated
  255   1        setPWMCompare2(comparetwo);
*** WARNING C188 IN LINE 255 OF Mcu\8051u\Src\commutate.c: 'parameter 1': value truncated
  256   1        setPWMCompare3(comparethree);
*** WARNING C188 IN LINE 256 OF Mcu\8051u\Src\commutate.c: 'parameter 1': value truncated
  257   1      }
  258          
  259          void startMotor(void) {
  260   1        if (running == 0) {
  261   2          commutate();
  262   2          commutation_interval = 10000;
  263   2          SET_INTERVAL_TIMER_COUNT(5000);
  264   2          running = 1;
  265   2        }
  266   1        enableCompInterrupts();
  267   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1432     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =      1452     ------
  xdata-const size     =    ------     ------
  edata size           =        60     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      1573     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
