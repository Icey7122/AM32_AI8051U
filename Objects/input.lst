C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 1   


C251 COMPILER V5.04b, COMPILATION OF MODULE input
OBJECT MODULE PLACED IN .\Objects\input.obj
COMPILER INVOKED BY: D:\Compiler\Keil_v5\C251\BIN\C251.EXE Mcu\8051u\Src\input.c XSMALL FUNCTIONS(REENTRANT) WARNINGLEVE
                    -L(3) OPTIMIZE(3,SPEED) BROWSE ORDER INCDIR(.\Inc;.\Mcu\8051u\Inc) INTVECTOR(0X1000) DEBUG PRINT(.\Objects\input.lst) TAB
                    -S(2) OBJECT(.\Objects\input.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "input.h"
    3          #include "targets.h"
    4          #include "functions.h"
    5          #include "eeprom.h"
    6          #include "sounds.h"
    7          #include "phaseouts.h"
    8          #include "commutate.h"
    9          
   10          
   11          uint8_t servoPwm = 0;
   12          uint8_t dshot = 0;
   13          uint8_t ic_timer_prescaler = 0;
   14          // uint8_t out_put = 0;
   15          
   16          //detectInput
   17          int32_t xdata dma_buffer[64] = { 0 };
   18          uint8_t buffersize = 32;
   19          uint16_t smallestnumber = 20000;
   20          uint16_t average_signal_pulse;
   21          //input and input process
   22          uint8_t input_ready = 0;
   23          uint8_t inputSet = 0;         //输入设置
   24          int16_t newinput;
   25          int16_t adjusted_input;
   26          int16_t input;
   27          int16_t last_input;
   28          int16_t input_override;
   29          int32_t duty_cycle;
   30          int32_t adjusted_duty_cycle;
   31          int32_t last_duty_cycle;
   32          uint8_t max_duty_cycle_change;
   33          int32_t prop_brake_duty_cycle;
   34          uint8_t brushed_direction_set = 0;
   35          uint8_t return_to_center = 0;
   36          uint16_t zero_input_counter = 0;
   37          
   38          void receiveDshotDma(void) {
   39   1        // out_put = 0;
   40   1      
   41   1        PWMB_PSCRH = 0x00;
   42   1        PWMB_PSCRL = ic_timer_prescaler;
   43   1        PWMB_ARRH = 0xFF;
   44   1        PWMB_ARRL = 0xFF;
   45   1      
   46   1        PWMB_CCER1 = 0x01;
   47   1      
   48   1        PWMB_EGR = 0x01; 
   49   1      }
   50          
   51          void transfercomplete(void) {
   52   1      
   53   1        if (inputSet == 0) {
   54   2          detectInput();
   55   2          receiveDshotDma();
   56   2          return;
   57   2        }
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 2   

   58   1        if (inputSet == 1) {
   59   2      
   60   2          // if (dshot_telemetry) {
   61   2          //  if (out_put) {
   62   2          //      make_dshot_package(e_com_time);
   63   2          //      computeDshotDMA();
   64   2          //      receiveDshotDma();
   65   2          //      return;
   66   2          //  } else {
   67   2          //      sendDshotDma();
   68   2          //      return;
   69   2          //  }
   70   2          // } else {
   71   2      
   72   2            // if (dshot == 1) {
   73   2            //     computeDshotDMA();
   74   2            //     receiveDshotDma();
   75   2            // }
   76   2            if (servoPwm == 1) {
   77   3              if (getInputPinState()) {
   78   4                buffersize = 3;
   79   4              } else {
   80   4                buffersize = 2;
   81   4                computeServoInput();
   82   4              }
   83   3              receiveDshotDma();
   84   3            }
   85   2          // }
   86   2          if (!armed) {
   87   3            // if (dshot && (average_count < 8) && (zero_input_counter > 5)) {
   88   3            //  average_count++;
   89   3            //  average_packet_length = average_packet_length
   90   3            //      + (dma_buffer[31] - dma_buffer[0]);
   91   3            //  if (average_count == 8) {
   92   3            //    dshot_frametime_high = (average_packet_length >> 3)
   93   3            //        + (average_packet_length >> 7);
   94   3            //    dshot_frametime_low = (average_packet_length >> 3)
   95   3            //        - (average_packet_length >> 7);
   96   3            //  }
   97   3            // }
   98   3            if (adjusted_input == 0 && calibration_required == 0) { // note this in input..not newinput so it
   99   4                                        // will be adjusted be main loop
  100   4              zero_input_counter++;
  101   4            } else {
  102   4              zero_input_counter = 0;
  103   4              if (adjusted_input > 1500) {
  104   5                if (getAbsDif(adjusted_input, last_input) > 50) {
  105   6                  enter_calibration_counter = 0;
  106   6                } else {
  107   6                  enter_calibration_counter++;
  108   6                }
  109   5      
  110   5                if (enter_calibration_counter > 50 && (!high_calibration_set)) {
  111   6                  playBeaconTune3();
  112   6                  calibration_required = 1;
  113   6                  enter_calibration_counter = 0;
  114   6                }
  115   5                last_input = adjusted_input;
  116   5              }
  117   4            }
  118   3          }
  119   2        }
  120   1      }
  121          
  122          void detectInput(void) {
  123   1        uint16_t j;
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 3   

  124   1        uint32_t lastnumber = dma_buffer[0];
  125   1        smallestnumber = 20000;
  126   1        average_signal_pulse = 0;
  127   1        for (j = 1; j < 31; j++) {
  128   2            if (dma_buffer[j] - lastnumber > 0) {
  129   3                if ((dma_buffer[j] - lastnumber) < smallestnumber) {
  130   4                    smallestnumber = dma_buffer[j] - lastnumber;
  131   4                }
  132   3                average_signal_pulse += (dma_buffer[j] - lastnumber);
  133   3            }
  134   2            lastnumber = dma_buffer[j];
  135   2        }
  136   1        average_signal_pulse = average_signal_pulse / 32;
  137   1      
  138   1        if (dshot == 1) {
  139   2            // checkDshot();
  140   2        }
  141   1        if (servoPwm == 1) {
  142   2          checkServo();
  143   2        }
  144   1      
  145   1        if (!dshot && !servoPwm) {
  146   2          // checkDshot();
  147   2          checkServo();
  148   2        }
  149   1      }
  150          
  151          void setInput(void) {
  152   1        if (BI_DIRECTION) {
  153   2          if (dshot == 0) {
  154   3            if (RC_CAR_REVERSE) {
  155   4              if (newinput > (1000 + (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 155 OF Mcu\8051u\Src\input.c: '>': signed/unsigned type mismatch
  156   5                if (forward == DIR_REVERSED) {
  157   6                  adjusted_input = 0;
  158   6                  //               if (running) {
  159   6                  prop_brake_active = 1;
  160   6                  if (return_to_center) {
  161   7                    forward = 1 - DIR_REVERSED;
  162   7                    prop_brake_active = 0;
  163   7                    return_to_center = 0;
  164   7                  }
  165   6                }
  166   5                if (prop_brake_active == 0) {
  167   6                  return_to_center = 0;
  168   6                  adjusted_input = map(newinput, 1000 + (servo_dead_band << 1), 2000, 47, 2047);
  169   6                }
  170   5              }
  171   4              if (newinput < (1000 - (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 171 OF Mcu\8051u\Src\input.c: '<': signed/unsigned type mismatch
  172   5                if (forward == (1 - DIR_REVERSED)) {
  173   6                  adjusted_input = 0;
  174   6                  prop_brake_active = 1;
  175   6                  if (return_to_center) {
  176   7                    forward = DIR_REVERSED;
  177   7                    prop_brake_active = 0;
  178   7                    return_to_center = 0;
  179   7                  }
  180   6                }
  181   5                if (prop_brake_active == 0) {
  182   6                  return_to_center = 0;
  183   6                  adjusted_input = map(newinput, 0, 1000 - (servo_dead_band << 1), 2047, 47);
  184   6                }
  185   5              }
  186   4              if (newinput >= (1000 - (servo_dead_band << 1)) && newinput <= (1000 + (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 186 OF Mcu\8051u\Src\input.c: '<=': signed/unsigned type mismatch
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 4   

*** WARNING C173 IN LINE 186 OF Mcu\8051u\Src\input.c: '>=': signed/unsigned type mismatch
  187   5                adjusted_input = 0;
  188   5                if (prop_brake_active) {
  189   6                  prop_brake_active = 0;
  190   6                  return_to_center = 1;
  191   6                }
  192   5              }
  193   4            } else {
  194   4              if (newinput > (1000 + (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 194 OF Mcu\8051u\Src\input.c: '>': signed/unsigned type mismatch
  195   5                if (forward == DIR_REVERSED) {
  196   6                  if (((commutation_interval > reverse_speed_threshold) && (duty_cycle < 200)) || stepper_sine) {
  197   7                    forward = 1 - DIR_REVERSED;
  198   7                    zero_crosses = 0;
  199   7                    old_routine = 1;
  200   7                    maskPhaseInterrupts();
  201   7                    brushed_direction_set = 0;
  202   7                  } else {
  203   7                    newinput = 1000;
  204   7                  }
  205   6                }
  206   5                adjusted_input = map(newinput,1000 + (servo_dead_band << 1), 2000, 47, 2047);
  207   5              }
  208   4              if (newinput < (1000 - (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 208 OF Mcu\8051u\Src\input.c: '<': signed/unsigned type mismatch
  209   5                if (forward == (1 - DIR_REVERSED)) {
  210   6                  if (((commutation_interval > reverse_speed_threshold) && (duty_cycle < 200)) || stepper_sine) {
  211   7                    zero_crosses = 0;
  212   7                    old_routine = 1;
  213   7                    forward = DIR_REVERSED;
  214   7                    maskPhaseInterrupts();
  215   7                    brushed_direction_set = 0;
  216   7                  } else {
  217   7                    newinput = 1000;
  218   7                  }
  219   6                }
  220   5                adjusted_input = map(newinput, 0, 1000 - (servo_dead_band << 1), 2047, 47);
  221   5              }
  222   4      
  223   4              if (newinput >= (1000 - (servo_dead_band << 1)) && newinput <= (1000 + (servo_dead_band << 1))) {
*** WARNING C173 IN LINE 223 OF Mcu\8051u\Src\input.c: '<=': signed/unsigned type mismatch
*** WARNING C173 IN LINE 223 OF Mcu\8051u\Src\input.c: '>=': signed/unsigned type mismatch
  224   5                adjusted_input = 0;
  225   5                brushed_direction_set = 0;
  226   5              }
  227   4            }
  228   3          }
  229   2      
  230   2          if (dshot) {
  231   3            if (newinput > 1047) {
  232   4      
  233   4              if (forward == DIR_REVERSED) {
  234   5                if (((commutation_interval > reverse_speed_threshold) && (duty_cycle < 200)) || stepper_sine) {
  235   6                  forward = 1 - DIR_REVERSED;
  236   6                  zero_crosses = 0;
  237   6                  old_routine = 1;
  238   6                  maskPhaseInterrupts();
  239   6                  brushed_direction_set = 0;
  240   6                } else {
  241   6                  newinput = 0;
  242   6                }
  243   5              }
  244   4              adjusted_input = ((newinput - 1048) * 2 + 47) - 1;
  245   4            }
  246   3            if (newinput <= 1047 && newinput > 47) {
  247   4              if (forward == (1 - DIR_REVERSED)) {
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 5   

  248   5                if (((commutation_interval > reverse_speed_threshold) && (duty_cycle < 200)) || stepper_sine) {
  249   6                  zero_crosses = 0;
  250   6                  old_routine = 1;
  251   6                  forward = DIR_REVERSED;
  252   6                  maskPhaseInterrupts();
  253   6                  brushed_direction_set = 0;
  254   6                } else {
  255   6                  newinput = 0;
  256   6                }
  257   5              }
  258   4              adjusted_input = ((newinput - 48) * 2 + 47) - 1;
  259   4            }
  260   3            if (newinput < 48) {
  261   4              adjusted_input = 0;
  262   4              brushed_direction_set = 0;
  263   4            }
  264   3          }
  265   2        } else {
  266   2          adjusted_input = newinput;
  267   2        }
  268   1      
  269   1        if ((bemf_timeout_happened > bemf_timeout) && STUCK_ROTOR_PROTECTION) {
  270   2          allOff();
  271   2          maskPhaseInterrupts();
  272   2          input = 0;
  273   2          bemf_timeout_happened = 102;
  274   2        } else {
  275   2      
  276   2          if (USE_SIN_START) {
  277   3            if (adjusted_input < 30) { // dead band ?
  278   4              input = 0;
  279   4            }
  280   3            if (adjusted_input > 30 && adjusted_input < (sine_mode_changeover_thottle_level * 20)) {
  281   4              input = map(adjusted_input, 30,(sine_mode_changeover_thottle_level * 20), 47, 160);
  282   4            }
  283   3            if (adjusted_input >= (sine_mode_changeover_thottle_level * 20)) {
  284   4              input = map(adjusted_input,(sine_mode_changeover_thottle_level * 20), 2047, 160, 2047);
  285   4            }
  286   3          } else {
  287   3            if (use_speed_control_loop) {
  288   4              if (drive_by_rpm) {
  289   5                target_e_com_time = 60000000
  290   5                    / map(adjusted_input, 47, 2047, MINIMUM_RPM_SPEED_CONTROL,MAXIMUM_RPM_SPEED_CONTROL)
  291   5                    / (MOTOR_POLES / 2);
  292   5                if (adjusted_input < 47) { // dead band ?
  293   6                  input = 0;
  294   6                  speedPid.error = 0;
  295   6                  input_override = 0;
  296   6                } else {
  297   6                  input = (uint16_t) input_override; // speed control pid override
  298   6                  if (input_override > 2047) {
  299   7                    input = 2047;
  300   7                  }
  301   6                  if (input_override < 48) {
  302   7                    input = 48;
  303   7                  }
  304   6                }
  305   5              } else {
  306   5      
  307   5                input = input_override; // speed control pid override
  308   5                if (input_override > 2047) {
  309   6                  input = 2047;
  310   6                }
  311   5                if (input_override < 48) {
  312   6                  input = 48;
  313   6                }
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 6   

  314   5              }
  315   4            } else {
  316   4              input = adjusted_input;
  317   4            }
  318   3          }
  319   2        }
  320   1      
  321   1        if (!stepper_sine) {
  322   2          if ((input >= 47 + (80 * USE_SIN_START)) && armed) {
  323   3            if (running == 0) {
  324   4              allOff();
  325   4              if (!old_routine) {
  326   5                startMotor();
  327   5              }
  328   4              running = 1;
  329   4              last_duty_cycle = min_startup_duty_cycle;
  330   4            }
  331   3      
  332   3            if (USE_SIN_START) {
  333   4              duty_cycle = map(input, 137, 2047, minimum_duty_cycle + 40, 2000);
  334   4            } else {
  335   4              duty_cycle = map(input, 47, 2047, minimum_duty_cycle,2000);
  336   4            }
  337   3      
  338   3            if (!RC_CAR_REVERSE) {
  339   4              prop_brake_active = 0;
  340   4            }
  341   3          }
  342   2      
  343   2          if (input < 47 + (80 * USE_SIN_START)) {
  344   3            if (play_tone_flag != 0) {
  345   4              switch (play_tone_flag) {
  346   5              case 1:
  347   5                playDefaultTone();
  348   5                break;
  349   5              case 2:
  350   5                playChangedTone();
  351   5                break;
  352   5              case 3:
  353   5                playBeaconTune3();
  354   5                break;
  355   5              case 4:
  356   5                playInputTune2();
  357   5                break;
  358   5              case 5:
  359   5                playDefaultTone();
  360   5                break;
  361   5              }
  362   4              play_tone_flag = 0;
  363   4            }
  364   3      
  365   3            if (!COMP_PWM) {
  366   4              duty_cycle = 0;
  367   4              if (!running) {
  368   5                old_routine = 1;
  369   5                zero_crosses = 0;
  370   5                if (BRAKE_ON_STOP) {
  371   6                  fullBrake();
  372   6                } else {
  373   6                  if (!prop_brake_active) {
  374   7                    allOff();
  375   7                  }
  376   6                }
  377   5              }
  378   4              if (RC_CAR_REVERSE && prop_brake_active) {
  379   5      
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 7   

  380   5                prop_brake_duty_cycle = (getAbsDif(1000, newinput) + 1000);
  381   5                if (prop_brake_duty_cycle >= (PWM_MAX_ARR - 1)) {
  382   6                  fullBrake();
  383   6                } else {
  384   6                  proportionalBrake();
  385   6                }
  386   5      
  387   5              }
  388   4            } else {
  389   4              if (!running) {
  390   5                old_routine = 1;
  391   5                zero_crosses = 0;
  392   5                bad_count = 0;
  393   5                if (BRAKE_ON_STOP) {
  394   6                  if (!USE_SIN_START) {
  395   7                    prop_brake_duty_cycle = (1980) + DRAG_BRAKE_STRENGTH * 2;
  396   7                    proportionalBrake();
  397   7                    prop_brake_active = 1;
  398   7                  }
  399   6                } else {
  400   6                  allOff();
  401   6                }
  402   5                duty_cycle = 0;
  403   5              }
  404   4      
  405   4              phase_A_position = ((step) * 60) + 180;
  406   4              if (phase_A_position > 359) {
  407   5                phase_A_position -= 360;
  408   5              }
  409   4              phase_B_position = phase_A_position + 119;
  410   4              if (phase_B_position > 359) {
  411   5                phase_B_position -= 360;
  412   5              }
  413   4              phase_C_position = phase_A_position + 239;
  414   4              if (phase_C_position > 359) {
  415   5                phase_C_position -= 360;
  416   5              }
  417   4      
  418   4              if (USE_SIN_START == 1) {
  419   5                stepper_sine = 1;
  420   5              }
  421   4              duty_cycle = 0;
  422   4            }
  423   3          }
  424   2          if (!prop_brake_active) {
  425   3            if (input >= 47 && (zero_crosses < (30U >> STALL_PROTECTION))) {
  426   4              if (duty_cycle < min_startup_duty_cycle) {
  427   5                duty_cycle = min_startup_duty_cycle;
  428   5              }
  429   4              if (duty_cycle > max_startup_duty_cycle) {
  430   5                duty_cycle = max_startup_duty_cycle;
  431   5              }
  432   4            }
  433   3      
  434   3            if (duty_cycle > maximum_duty_cycle) {
  435   4              duty_cycle = maximum_duty_cycle;
  436   4            }
  437   3            
  438   3            if (USE_CURRENT_LIMIT) {
  439   4              if (duty_cycle > current_limit_adjust) {
  440   5                duty_cycle = current_limit_adjust;
  441   5              }
  442   4            }
  443   3      
  444   3            if (stall_protection_adjust > 0 && input > 47) {
  445   4              duty_cycle = duty_cycle + (int16_t) stall_protection_adjust;
C251 COMPILER V5.04b,  input                                                               22/12/24  10:45:13  PAGE 8   

  446   4            }
  447   3          }
  448   2        }
  449   1      }
  450          
  451          void resetInputCaptureTimer(void) {
  452   1        PWMB_PSCRH = 0x00;
  453   1        PWMB_PSCRL = 0x00;
  454   1        PWMB_ARRH = 0xFF;
  455   1        PWMB_ARRL = 0xFF;
  456   1      
  457   1        PWMB_CCER1 = 0x01;
  458   1      
  459   1        PWMB_EGR = 0x01; 
  460   1      }
  461          
  462          // uint8_t getInputPinState(void) {
  463          //  return INPUT_PIN;
  464          // }
  465          
  466          void setInputPolarityRising(void) {
  467   1      
  468   1      }
  469          
  470          // void setInputPullDown(void) {
  471          //  gpio_mode_set(INPUT_PIN_PORT, INPUT_MODE_PIN, GPIO_Mode_IPD);
  472          // }
  473          
  474          // void setInputPullUp(void) {
  475          //  gpio_mode_set(INPUT_PIN_PORT, INPUT_MODE_PIN, GPIO_Mode_IPU);
  476          // }
  477          
  478          void enableHalfTransferInt(void) {
  479   1        
  480   1      }  
  481          
  482          // void setInputPullNone(void) {
  483          //  gpio_mode_set(INPUT_PIN_PORT, INPUT_MODE_PIN, GPIO_Mode_IN_FLOATING);
  484          // }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2807     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       256     ------
  xdata-const size     =    ------     ------
  edata size           =        41     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       313     ------
End of Module Information.


C251 COMPILATION COMPLETE.  8 WARNING(S),  0 ERROR(S)
