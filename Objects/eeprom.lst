C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 1   


C251 COMPILER V5.04b, COMPILATION OF MODULE eeprom
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: D:\Compiler\Keil_v5\C251\BIN\C251.EXE Mcu\8051u\Src\eeprom.c XSMALL FUNCTIONS(REENTRANT) WARNINGLEV
                    -EL(3) OPTIMIZE(3,SPEED) BROWSE ORDER INCDIR(.\Inc;.\Mcu\8051u\Inc) INTVECTOR(0X1000) DEBUG PRINT(.\Objects\eeprom.lst) T
                    -ABS(2) OBJECT(.\Objects\eeprom.obj) 

stmt  level    source

    1          /*
    2           * eeprom.c
    3           *
    4           *  Created on: 2024年12月2日
    5           *      Author: 17263
    6           */
    7          #include "sounds.h"
    8          #include "peripherals.h"
    9          #include "eeprom.h"
   10          #include "input.h"
   11          #include "string.h"
   12          #include "functions.h"
   13          
   14          #define page_size 0x200                   // 512 bytes for STC8051U
   15          
   16          uint32_t eeprom_address = EEPROM_START_ADD;
   17          uint8_t xdata eepromBuffer[176] = { 0 };
   18          
   19          uint8_t BI_DIRECTION = 0;       //双向
   20          uint8_t DIR_REVERSED;         //方向反转l
   21          uint8_t USE_SIN_START = 1;      //正弦启动
   22          uint8_t COMP_PWM = 1;         //互补PWM
   23          uint8_t VARIABLE_PWM = 1;       //可变PWM
   24          uint8_t STUCK_ROTOR_PROTECTION = 1; //堵转保护
   25          uint8_t ADVANCE_LEVEL = 2;      //提前角度
   26          uint16_t PWM_MAX_ARR = PWM_AUTORELOAD;
   27          uint16_t PWM_ARR   = PWM_AUTORELOAD;
   28          int32_t min_startup_duty_cycle = 120;
   29          int32_t max_startup_duty_cycle = 200;
   30          int32_t minimum_duty_cycle = DEAD_TIME;
   31          int32_t maximum_duty_cycle = 2000;
   32          uint16_t stall_protect_minimum_duty = DEAD_TIME;
   33          uint16_t MOTOR_KV = 2000;
   34          uint8_t MOTOR_POLES = 14;
   35          uint8_t BRAKE_ON_STOP = 0;
   36          uint8_t STALL_PROTECTION = 1;   
   37          uint8_t TLM_ON_INTERVAL = 0;    //遥测开启
   38          int16_t servo_low_threshold = 1012;     //舵机低阈值
   39          int16_t servo_high_threshold = 2000;    //舵机高阈值
   40          int16_t servo_neutral = 1500;         //舵机中性
   41          uint8_t servo_dead_band = 100;      //舵机死区
   42          uint8_t LOW_VOLTAGE_CUTOFF = 0;   //低电压保护
   43          uint16_t low_cell_volt_cutoff = 330;  //低电压保护电压
   44          uint8_t RC_CAR_REVERSE = 0;     //RC车模式
   45          uint8_t USE_HALL_SENSOR;        //有感模式
   46          uint8_t sine_mode_changeover_thottle_level = 25; //正弦模式切换油门等级
   47          uint8_t DRAG_BRAKE_STRENGTH = 5;    //拖动制动强度
   48          uint8_t dead_time_override = DEAD_TIME;     //死区时间
   49          uint16_t throttle_max_at_low_rpm = 400;
   50          uint16_t throttle_max_at_high_rpm = 2000;
   51          uint8_t TEMPERATURE_LIMIT = 255;      // degrees 255 to disable
   52          uint16_t current_limit = 0;     //电流限制
   53          uint8_t USE_CURRENT_LIMIT = 0;    //电流限制
   54          uint8_t SINE_MODE_POWER = 5;
   55          uint8_t AUTO_ADVANCE = 0;     //自动提前
   56          uint8_t low_rpm_throttle_limit = 1;
   57          uint16_t low_rpm_level = 20; // thousand erpm used to set range for throttle resrictions
C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 2   

   58          uint16_t high_rpm_level = 70; //
   59          uint16_t reverse_speed_threshold;
   60          uint8_t eeprom_layout_version = 2;
   61          
   62          uint8_t play_tone_flag;
   63          
   64          
   65          bool save_flash_nolib(const uint8_t *dat, uint32_t length, uint32_t add) {
   66   1        static uint32_t xdata i;
   67   1      
   68   1        IAP_ENABLE();
   69   1        // unlock flash
   70   1        // erase page if address even divisable by 512
   71   1        if ((add % page_size) == 0) {
   72   2          CMD_FAIL = 0;
   73   2      
   74   2          IAP_ERASE();
   75   2      
   76   2          IAP_ADDRE = (uint8_t) (add >> 16);
   77   2          IAP_ADDRH = (uint8_t) (add >> 8);
   78   2          IAP_ADDRL = (uint8_t) add;
   79   2      
   80   2          IAP_TRIG = 0x5A;
   81   2          IAP_TRIG = 0xA5;
   82   2          _nop_();
   83   2          _nop_();
   84   2          _nop_();
   85   2          _nop_();
   86   2      
   87   2          while (CMD_FAIL)
   88   2            ;
   89   2        }
   90   1      
   91   1        IAP_WRITE();        //宏调用, 送字节写命令
   92   1      
   93   1        for (i = 0; i < length; i++) {
   94   2          CMD_FAIL = 0;
   95   2      
   96   2          IAP_ADDRE = (uint8_t) ((add + i) >> 16);
   97   2          IAP_ADDRH = (uint8_t) ((add + i) >> 8);
   98   2          IAP_ADDRL = (uint8_t) (add + i);
   99   2          IAP_DATA = *(dat + i);
  100   2      
  101   2          IAP_TRIG = 0x5A;
  102   2          IAP_TRIG = 0xA5;
  103   2          _nop_();
  104   2          _nop_();
  105   2          _nop_();
  106   2          _nop_();
  107   2      
  108   2          while (CMD_FAIL)
  109   2            ;
  110   2        }
  111   1      
  112   1        IAP_DISABLE();                      //关闭IAP
  113   1      
  114   1        return memcmp(dat, (uint8_t *)add, length) == 0;
*** WARNING C188 IN LINE 114 OF Mcu\8051u\Src\eeprom.c: 'parameter 3': value truncated
*** WARNING C188 IN LINE 114 OF Mcu\8051u\Src\eeprom.c: 'parameter 3': value truncated
*** WARNING C188 IN LINE 114 OF Mcu\8051u\Src\eeprom.c: 'parameter 3': value truncated
*** WARNING C188 IN LINE 114 OF Mcu\8051u\Src\eeprom.c: 'parameter 3': value truncated
  115   1      }
  116          
  117          void read_flash_bin(uint8_t *dat, uint32_t add, uint32_t out_buff_len) {
  118   1        memcpy(dat, (uint8_t *)add, out_buff_len);
*** WARNING C188 IN LINE 118 OF Mcu\8051u\Src\eeprom.c: 'parameter 3': value truncated
C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 3   

  119   1      }
  120          
  121          
  122          void loadEEpromSettings(void) {
  123   1        read_flash_bin(eepromBuffer, eeprom_address, 176);
  124   1      
  125   1        if (eepromBuffer[17] == 0x01) {
  126   2          DIR_REVERSED = 1;
  127   2        } else {
  128   2          DIR_REVERSED = 0;
  129   2        }
  130   1        if (eepromBuffer[18] == 0x01) {
  131   2          BI_DIRECTION = 1;
  132   2        } else {
  133   2          BI_DIRECTION = 0;
  134   2        }
  135   1        if (eepromBuffer[19] == 0x01) {
  136   2          USE_SIN_START = 1;
  137   2          //   min_startup_duty = sin_mode_min_s_d;
  138   2        }else{
  139   2          USE_SIN_START = 0;
  140   2        }
  141   1        if (eepromBuffer[20] == 0x01) {
  142   2          COMP_PWM = 1;
  143   2        } else {
  144   2          COMP_PWM = 0;
  145   2        }
  146   1        if (eepromBuffer[21] == 0x01) {
  147   2          VARIABLE_PWM = 1;
  148   2        } else {
  149   2          VARIABLE_PWM = 0;
  150   2        }
  151   1        if (eepromBuffer[22] == 0x01) {
  152   2          STUCK_ROTOR_PROTECTION = 1;
  153   2        } else {
  154   2          STUCK_ROTOR_PROTECTION = 0;
  155   2        }
  156   1        if (eepromBuffer[23] < 4) {
  157   2          ADVANCE_LEVEL = eepromBuffer[23];
  158   2        } else {
  159   2          ADVANCE_LEVEL = 2; // * 7.5 increments
  160   2        }
  161   1      
  162   1        if (eepromBuffer[24] < 49 && eepromBuffer[24] > 7) {
  163   2          if (eepromBuffer[24] < 49 && eepromBuffer[24] > 23) {
  164   3            PWM_MAX_ARR = map(eepromBuffer[24], 24, 48, PWM_AUTORELOAD,PWM_AUTORELOAD / 2);
  165   3          }
  166   2          if (eepromBuffer[24] < 24 && eepromBuffer[24] > 11) {
  167   3            PWM_MAX_ARR = map(eepromBuffer[24], 12, 24, PWM_AUTORELOAD * 2,PWM_AUTORELOAD);
  168   3          }
  169   2          if (eepromBuffer[24] < 12 && eepromBuffer[24] > 7) {
  170   3            PWM_MAX_ARR = map(eepromBuffer[24], 7, 16, PWM_AUTORELOAD * 3,PWM_AUTORELOAD / 2 * 3);
  171   3          }
  172   2          SET_AUTO_RELOAD_PWM(PWM_MAX_ARR);
  173   2          //   throttle_max_at_high_rpm = TIMER1_MAX_ARR;
  174   2          //   duty_cycle_maximum = TIMER1_MAX_ARR;
  175   2        } else {
  176   2          PWM_ARR = PWM_AUTORELOAD;
  177   2          SET_AUTO_RELOAD_PWM(PWM_ARR);
  178   2        }
  179   1      
  180   1        if (eepromBuffer[25] < 151 && eepromBuffer[25] > 49) {
  181   2          min_startup_duty_cycle = (eepromBuffer[25]);
  182   2          minimum_duty_cycle = (eepromBuffer[25] / 3);
  183   2          stall_protect_minimum_duty = minimum_duty_cycle + 10;
  184   2        } else {
C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 4   

  185   2          min_startup_duty_cycle = 150;
  186   2          minimum_duty_cycle = (min_startup_duty_cycle / 2) + 10;
  187   2        }
  188   1      
  189   1        MOTOR_KV = (eepromBuffer[26] * 40) + 20;
  190   1      
  191   1        MOTOR_POLES = eepromBuffer[27];
  192   1      
  193   1        if (eepromBuffer[28] == 0x01) {
  194   2          BRAKE_ON_STOP = 1;
  195   2        } else {
  196   2          BRAKE_ON_STOP = 0;
  197   2        }
  198   1      
  199   1        if (eepromBuffer[29] == 0x01) {
  200   2          STALL_PROTECTION = 1;
  201   2        } else {
  202   2          STALL_PROTECTION = 0;
  203   2        }
  204   1        setVolume(2);
  205   1        if (eepromBuffer[1] > 0) { // these commands weren't introduced until eeprom version 1.
  206   2          if (eepromBuffer[30] > 11) {
  207   3            setVolume(5);
  208   3          } else {
  209   3            setVolume(eepromBuffer[30]);
  210   3          }
  211   2      
  212   2          if (eepromBuffer[31] == 0x01) {
  213   3            TLM_ON_INTERVAL = 1;
  214   3          } else {
  215   3            TLM_ON_INTERVAL = 0;
  216   3          }
  217   2          servo_low_threshold = (eepromBuffer[32] * 2) + 750; // anything below this point considered 0
  218   2          servo_high_threshold = (eepromBuffer[33] * 2) + 1750;
  219   2          // anything above this point considered 2000 (max)
  220   2          servo_neutral = (eepromBuffer[34]) + 1374;
  221   2          servo_dead_band = eepromBuffer[35];
  222   2      
  223   2          if (eepromBuffer[36] == 0x01) {
  224   3            LOW_VOLTAGE_CUTOFF = 1;
  225   3          } else {
  226   3            LOW_VOLTAGE_CUTOFF = 0;
  227   3          }
  228   2      
  229   2          low_cell_volt_cutoff = eepromBuffer[37] + 250; // 2.5 to 3.5 volts per cell range
  230   2      
  231   2          if (eepromBuffer[38] == 0x01) {
  232   3            RC_CAR_REVERSE = 1;
  233   3          } else {
  234   3            RC_CAR_REVERSE = 0;
  235   3          }
  236   2      
  237   2          if (eepromBuffer[39] == 0x01) {
  238   3      #ifdef HAS_HALL_SENSORS
                           USE_HALL_SENSOR = 1;
               #else
  241   3            USE_HALL_SENSOR = 0;
  242   3      #endif
  243   3          } else {
  244   3            USE_HALL_SENSOR = 0;
  245   3          }
  246   2      
  247   2          if (eepromBuffer[40] > 4 && eepromBuffer[40] < 26) { // sine mode changeover 5-25 percent throttle
  248   3            sine_mode_changeover_thottle_level = eepromBuffer[40];
  249   3          }
  250   2      
C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 5   

  251   2          if (eepromBuffer[41] > 0 && eepromBuffer[41] < 11) { // drag brake 1-10
  252   3            DRAG_BRAKE_STRENGTH = eepromBuffer[41];
  253   3          }
  254   2      
  255   2          if (eepromBuffer[42] > 0 && eepromBuffer[42] < 10) { //driving_brake_strength:motor brake 1-9
  256   3            dead_time_override = DEAD_TIME + (150 - (eepromBuffer[42] * 10));
  257   3            if (dead_time_override > 200) {
  258   4              dead_time_override = 200;
  259   4            }
  260   3            min_startup_duty_cycle = eepromBuffer[25] + dead_time_override;
  261   3            minimum_duty_cycle = eepromBuffer[25] / 2 + dead_time_override;
  262   3            throttle_max_at_low_rpm = throttle_max_at_low_rpm + dead_time_override;
  263   3            max_startup_duty_cycle = max_startup_duty_cycle + dead_time_override;
  264   3            if (PWMA_DTR <= 127) {
  265   4              PWMA_DTR = dead_time_override;
  266   4            } else if (PWMA_DTR > 127) {
  267   4              PWMA_DTR = 0x80 | ((dead_time_override - 128) >> 1);
  268   4            }
  269   3          }
  270   2      
  271   2          if (eepromBuffer[43] >= 70 && eepromBuffer[43] <= 140) {
  272   3            TEMPERATURE_LIMIT = eepromBuffer[43];
  273   3          }
  274   2      
  275   2          if (eepromBuffer[44] > 0 && eepromBuffer[44] < 100) {
  276   3            current_limit = eepromBuffer[44] * 2;
  277   3            USE_CURRENT_LIMIT = 1;
  278   3          }
  279   2      
  280   2          if (eepromBuffer[45] > 0 && eepromBuffer[45] < 11) {
  281   3            SINE_MODE_POWER = eepromBuffer[45];
  282   3          }
  283   2      
  284   2          if (eepromBuffer[46] < 10) {
  285   3            switch (eepromBuffer[46]) {
  286   4            case AUTO_IN:
  287   4              dshot = 0;
  288   4              servoPwm = 0;
  289   4              break;
  290   4            case DSHOT_IN:
  291   4              dshot = 1;
  292   4              break;
  293   4            case SERVO_IN:
  294   4              servoPwm = 1;
  295   4              break;
  296   4            case SERIAL_IN:
  297   4              break;
  298   4            };
  299   3          } else {
  300   3            dshot = 0;
  301   3            servoPwm = 0;
  302   3          }
  303   2      
  304   2          if (eepromBuffer[47] == 0x01) {
  305   3            AUTO_ADVANCE = 1;
  306   3          } else {
  307   3            AUTO_ADVANCE = 0;
  308   3          }
  309   2      
  310   2          if (MOTOR_KV < 300) {
  311   3            low_rpm_throttle_limit = 0;
  312   3          }
  313   2      
  314   2          low_rpm_level = MOTOR_KV / 100 / (32 / MOTOR_POLES);
  315   2          high_rpm_level = MOTOR_KV / 12 / (32 / MOTOR_POLES);
  316   2        }
C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 6   

  317   1        reverse_speed_threshold = map(MOTOR_KV, 300, 3000, 1000, 500);
  318   1        //   reverse_speed_threshold = 200;
  319   1      //    if (!comp_pwm) {
  320   1      //        bi_direction = 0;
  321   1      //    }
  322   1      }
  323          
  324          void saveEEpromSettings(void) {
  325   1      
  326   1        eepromBuffer[1] = eeprom_layout_version;
  327   1        if (DIR_REVERSED == 1) {
  328   2          eepromBuffer[17] = 0x01;
  329   2        } else {
  330   2          eepromBuffer[17] = 0x00;
  331   2        }
  332   1        if (BI_DIRECTION == 1) {
  333   2          eepromBuffer[18] = 0x01;
  334   2        } else {
  335   2          eepromBuffer[18] = 0x00;
  336   2        }
  337   1        if (USE_SIN_START == 1) {
  338   2          eepromBuffer[19] = 0x01;
  339   2        } else {
  340   2          eepromBuffer[19] = 0x00;
  341   2        }
  342   1      
  343   1        if (COMP_PWM == 1) {
  344   2          eepromBuffer[20] = 0x01;
  345   2        } else {
  346   2          eepromBuffer[20] = 0x00;
  347   2        }
  348   1        if (VARIABLE_PWM == 1) {
  349   2          eepromBuffer[21] = 0x01;
  350   2        } else {
  351   2          eepromBuffer[21] = 0x00;
  352   2        }
  353   1        if (STUCK_ROTOR_PROTECTION == 1) {
  354   2          eepromBuffer[22] = 0x01;
  355   2        } else {
  356   2          eepromBuffer[22] = 0x00;
  357   2        }
  358   1        eepromBuffer[23] = ADVANCE_LEVEL;
  359   1        save_flash_nolib(eepromBuffer, 176, eeprom_address);
  360   1      }
  361          
  362          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1751     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       180     ------
  xdata-const size     =    ------     ------
  edata size           =        73     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       409     ------
End of Module Information.

C251 COMPILER V5.04b,  eeprom                                                              22/12/24  10:45:12  PAGE 7   


C251 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
