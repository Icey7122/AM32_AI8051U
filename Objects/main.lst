C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 1   


C251 COMPILER V5.04b, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Compiler\Keil_v5\C251\BIN\C251.EXE Src\main.c XSMALL FUNCTIONS(REENTRANT) WARNINGLEVEL(3) OPTIMI
                    -ZE(3,SPEED) BROWSE ORDER INCDIR(.\Inc;.\Mcu\8051u\Inc) INTVECTOR(0X1000) DEBUG PRINT(.\Objects\main.lst) TABS(2) OBJECT(
                    -.\Objects\main.obj) 

stmt  level    source

    1          #include "commutate.h"
    2          #include "eeprom.h"
    3          #include "mcu.h"
    4          #include "targets.h"
    5          #include "sounds.h"
    6          #include "phaseouts.h"
    7          #include "input.h"
    8          #include "stc8051u_it.h"
    9          #include "peripherals.h"
   10          #include "main.h"
   11          #include "functions.h"
   12          
   13          #include "string.h"
   14          #include "version.h"
   15          
   16          uint8_t drive_by_rpm = 0;
   17          uint8_t use_speed_control_loop = 0;
   18          uint32_t MINIMUM_RPM_SPEED_CONTROL = 1000;
   19          uint32_t MAXIMUM_RPM_SPEED_CONTROL = 10000;
   20          // assign speed control PID values values are x10000
   21          fastPID xdata speedPid = { // commutation speed loop time
   22              { 10 },       //kp
   23              { 0 },        //ki
   24              { 100 },      //kd
   25              { 10000 },    //integral_limit
   26              { 50000 }     //output_limit
   27          };
   28          
   29          fastPID xdata currentPid = { // 1khz loop time
   30              { 400 },      //kp
   31              { 0 },        //ki
   32              { 1000 },     //kd
   33              { 20000 },    //integral_limit
   34              { 100000 }    //output_limit
   35          };
   36          
   37          fastPID xdata stallPid = { // 1khz loop time
   38              { 1 },        //kp
   39              { 0 },        //ki
   40              { 50 },       //kd
   41              { 10000 },    //integral_limit
   42              { 50000 }     //output_limit
   43          };
   44          
   45          uint8_t armed = 0;
   46          uint8_t running = 0;
   47          uint8_t fast_accel = 0;
   48          
   49          uint16_t e_rpm;
   50          uint16_t k_erpm;
   51          uint32_t e_com_time;
   52          uint32_t target_e_com_time;
   53          
   54          uint8_t maximum_throttle_change_ramp = 1;
   55          
   56          uint8_t cell_counter = 0;     //电池计数器
   57          uint16_t battery_voltage = 0;     //电池电压
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 2   

   58          uint16_t actual_current = 0;    //实际电流
   59          uint16_t current_limit_adjust;   //电流限制
   60          uint8_t degrees_celsius;
   61          
   62          float stall_protection_adjust;
   63          uint16_t stall_protect_target_interval = TARGET_STALL_PROTECTION_INTERVAL;
   64          
   65          uint16_t telem_ms_counter = 0;    //遥测计数器
   66          uint8_t send_telemetry = 0;     //发送遥测标志
   67          uint8_t telemetry_interval_ms = 30;   //遥测间隔
   68          
   69          uint16_t ledcounter = 0;      //LED计数器
   70          uint16_t onekhzcounter = 0;     //1KHz计数器
   71          uint16_t twentykhzcounter = 0;    //20KHz计数器
   72          uint16_t signaltimecounter = 0;   //信号计数器
   73          uint16_t armed_timeout_counter = 0; //握手超时计数器
   74          
   75          
   76          void TwentyKhzRoutine(void) { //finish
   77   1        twentykhzcounter++;
   78   1        onekhzcounter++;
   79   1        ledcounter++;
   80   1        if (!armed) {
   81   2          if (cell_counter == 0) {
   82   3            if (inputSet) {
   83   4              if (adjusted_input == 0) {
   84   5                armed_timeout_counter++;
   85   5                if (armed_timeout_counter > LOOP_FREQUENCY_HZ) { // one second
   86   6                  if (zero_input_counter > 30) {
   87   7                    armed = 1;
   88   7                    if ((cell_counter == 0) && LOW_VOLTAGE_CUTOFF) {
   89   8                      static uint8_t i;
   90   8                      cell_counter = battery_voltage / 370;
   91   8                      for (i = 0; i < cell_counter; i++) {
   92   9                        playInputTune();
   93   9                        delayMillis(100);
   94   9                        RELOAD_WATCHDOG_COUNTER();
   95   9                      }
   96   8                    } else {
   97   8                      playInputTune();
   98   8                    }
   99   7                    if (!servoPwm) {
  100   8                      RC_CAR_REVERSE = 0;
  101   8                    }
  102   7                  } else {
  103   7                    inputSet = 0;
  104   7                    armed_timeout_counter = 0;
  105   7                  }
  106   6                }
  107   5              } else {
  108   5                armed_timeout_counter = 0;
  109   5              }
  110   4            }
  111   3          }
  112   2        }
  113   1      
  114   1        if (TLM_ON_INTERVAL) {
  115   2          telem_ms_counter++;
  116   2          if (telem_ms_counter > telemetry_interval_ms * 20) {
  117   3            send_telemetry = 1;
  118   3            telem_ms_counter = 0;
  119   3          }
  120   2        }
  121   1      
  122   1        if (!stepper_sine) {
  123   2          if (old_routine && running) {
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 3   

  124   3            maskPhaseInterrupts();
  125   3            getBemfState();
  126   3            if (!zcfound) {
  127   4              if (rising) {
  128   5                if (bemfcounter > min_bemf_counts_up) {
  129   6                  zcfound = 1;
  130   6                  zcfoundroutine();
  131   6                }
  132   5              } else {
  133   5                if (bemfcounter > min_bemf_counts_down) {
  134   6                  zcfound = 1;
  135   6                  zcfoundroutine();
  136   6                }
  137   5              }
  138   4            }
  139   3          }
  140   2      
  141   2          if (onekhzcounter > PID_LOOP_DIVIDER) { // 1khz PID loop
  142   3            onekhzcounter = 0;
  143   3            if (USE_CURRENT_LIMIT && running) {
  144   4              current_limit_adjust -= (int16_t) (doPidCalculations(&currentPid, actual_current, current_limit * 100
             -) / 10000);
  145   4              if (current_limit_adjust < minimum_duty_cycle) {
  146   5                current_limit_adjust = minimum_duty_cycle;
  147   5              }
  148   4              if (current_limit_adjust > PWM_ARR) {
  149   5                current_limit_adjust = PWM_ARR;
  150   5              }
  151   4            }
  152   3            if (STALL_PROTECTION && running) { // this boosts throttle as the rpm gets lower, for crawlers
  153   4                              // and rc cars only, do not use for multirotors.
  154   4              stall_protection_adjust += (doPidCalculations(&stallPid,commutation_interval, stall_protect_target_in
             -terval)) / 10000;
  155   4              if (stall_protection_adjust > 150) {
  156   5                stall_protection_adjust = 150;
  157   5              }
  158   4              if (stall_protection_adjust <= 0) {
  159   5                stall_protection_adjust = 0;
  160   5              }
  161   4            }
  162   3            if (use_speed_control_loop && running) {
  163   4              input_override += doPidCalculations(&speedPid, e_com_time,target_e_com_time) / 10000;
*** WARNING C188 IN LINE 163 OF Src\main.c: 'parameter 2': value truncated
*** WARNING C188 IN LINE 163 OF Src\main.c: 'parameter 3': value truncated
*** WARNING C188 IN LINE 163 OF Src\main.c: 'parameter 2': value truncated
*** WARNING C188 IN LINE 163 OF Src\main.c: 'parameter 3': value truncated
  164   4              if (input_override > 2047) {
  165   5                input_override = 2047;
  166   5              }
  167   4              if (input_override < 0) {
  168   5                input_override = 0;
  169   5              }
  170   4              if (zero_crosses < 100) {
  171   5                speedPid.integral = 0;
  172   5              }
  173   4            }
  174   3          }
  175   2      
  176   2          if (maximum_throttle_change_ramp) {
  177   3            if (zero_crosses < 150 || last_duty_cycle < 150) {
  178   4              max_duty_cycle_change = RAMP_SPEED_STARTUP;
  179   4            } else {
  180   4              if (average_interval > 500) {
  181   5                max_duty_cycle_change = RAMP_SPEED_LOW_RPM;
  182   5              } else {
  183   5                max_duty_cycle_change = RAMP_SPEED_HIGH_RPM;
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 4   

  184   5              }
  185   4            }
  186   3      
  187   3            if ((duty_cycle - last_duty_cycle) > max_duty_cycle_change) {
  188   4              duty_cycle = last_duty_cycle + max_duty_cycle_change;
  189   4              if (commutation_interval > 500) {
  190   5                fast_accel = 1;
  191   5                temp_advance = ADVANCE_LEVEL;
  192   5              } else {
  193   5                fast_accel = 0;
  194   5              }
  195   4            } else if ((last_duty_cycle - duty_cycle) > max_duty_cycle_change) {
  196   4              duty_cycle = last_duty_cycle - max_duty_cycle_change;
  197   4              fast_accel = 0;
  198   4              temp_advance = ADVANCE_LEVEL;
  199   4            } else {
  200   4              if (duty_cycle < 300 && commutation_interval < 300) {
  201   5                temp_advance = ADVANCE_LEVEL;
  202   5              } else {
  203   5                temp_advance = ADVANCE_LEVEL;
  204   5              }
  205   4      
  206   4              fast_accel = 0;
  207   4            }
  208   3          }
  209   2          if ((armed && running) && duty_cycle > 47) {
  210   3            if (VARIABLE_PWM) {
  211   4            }
  212   3            adjusted_duty_cycle = ((duty_cycle * PWM_ARR) / 2000) + 1;
  213   3      
  214   3          } else {
  215   3      
  216   3            if (prop_brake_active) {
  217   4              adjusted_duty_cycle = PWM_MAX_ARR - ((prop_brake_duty_cycle * PWM_ARR) / 2000) + 1;
  218   4            } else {
  219   4              adjusted_duty_cycle = ((duty_cycle * PWM_ARR) / 2000);
  220   4            }
  221   3          }
  222   2          last_duty_cycle = duty_cycle;
  223   2          SET_AUTO_RELOAD_PWM(PWM_ARR);
  224   2          SET_DUTY_CYCLE_ALL(adjusted_duty_cycle);
*** WARNING C188 IN LINE 224 OF Src\main.c: 'parameter 1': value truncated
  225   2        }
  226   1        signaltimecounter++;
  227   1      }
  228          
  229          
  230          static void checkDeviceInfo(void) {
  231   1      #define DEVINFO_MAGIC1 0x5925e3da
  232   1      #define DEVINFO_MAGIC2 0x4eb863d9
  233   1      
  234   1        const struct devinfo {
  235   1          uint32_t magic1;
  236   1          uint32_t magic2;
  237   1          const uint8_t deviceInfo[9];
  238   1        } *devinfo = (struct devinfo*) (0xFF1000 - 32);
  239   1      
  240   1        if (devinfo->magic1 != DEVINFO_MAGIC1 || devinfo->magic2 != DEVINFO_MAGIC2) {
  241   2          // bootloader does not support this feature, nothing to do
  242   2          return;
  243   2        }
  244   1        // change eeprom_address based on the code in the bootloaders device info
  245   1        switch (devinfo->deviceInfo[4]) {
  246   2        case 0x1f:
  247   2          eeprom_address = 0xFF7C00;
  248   2          break;
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 5   

  249   2        case 0x35:
  250   2          eeprom_address = 0xFFF800;
  251   2          break;
  252   2        case 0x2b:
  253   2          eeprom_address = 0xFFF800;
  254   2          break;
  255   2        }
  256   1      
  257   1      //  // TODO: check pin code and reboot to bootloader if incorrect
  258   1      }
  259          /**********************************************/
  260          void main(void)
  261          {
  262   1        initAfterJump();
  263   1      
  264   1        checkDeviceInfo();
  265   1      
  266   1        initCorePeripherals();
  267   1      
  268   1        // enableCorePeripherals();
  269   1      
  270   1        loadEEpromSettings();
  271   1      
  272   1        gpio_mode_set(P2,GPIO_ModePin_0,GPIO_Mode_IPU);
  273   1      
  274   1        if (VERSION_MAJOR != eepromBuffer[3] || VERSION_MINOR != eepromBuffer[4]) {
  275   2          eepromBuffer[3] = VERSION_MAJOR;
  276   2          eepromBuffer[4] = VERSION_MINOR;
  277   2          strncpy((char*) &eepromBuffer[5], FIRMWARE_NAME, 12);
  278   2          saveEEpromSettings();
  279   2        }
  280   1      
  281   1        if (DIR_REVERSED == 1) {
  282   2          forward = 0;
  283   2        } else {
  284   2          forward = 1;
  285   2        }
  286   1      
  287   1        PWM_ARR = PWM_MAX_ARR;
  288   1      
  289   1        if (!COMP_PWM) {
  290   2          USE_SIN_START = 0; // sine start requires complementary pwm.
  291   2        }
  292   1      
  293   1        if (RC_CAR_REVERSE) { // overrides a whole lot of things!
  294   2          throttle_max_at_low_rpm = 1000;
  295   2          BI_DIRECTION = 1;
  296   2          USE_SIN_START = 0;
  297   2          low_rpm_throttle_limit = 1;
  298   2          VARIABLE_PWM = 0;
  299   2          // stall_protection = 1;
  300   2          COMP_PWM = 0;
  301   2          STUCK_ROTOR_PROTECTION = 0;
  302   2          minimum_duty_cycle = minimum_duty_cycle + 50;
  303   2          stall_protect_minimum_duty = stall_protect_minimum_duty + 50;
  304   2          min_startup_duty_cycle = min_startup_duty_cycle + 50;
  305   2        }
  306   1      
  307   1        playStartupTune();
  308   1      
  309   1        zero_input_counter = 0;
  310   1      
  311   1        IWDG_Init();
  312   1      
  313   1        RELOAD_WATCHDOG_COUNTER();
  314   1      
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 6   

  315   1        receiveDshotDma();
  316   1        if (drive_by_rpm) {
  317   2          use_speed_control_loop = 1;
  318   2        }
  319   1      
  320   1        setInputPullUp();
  321   1      
  322   1        while (1)
  323   1        {
  324   2          if(input_ready)
  325   2          {
  326   3            setInput();
  327   3            input_ready = 0;
  328   3          }
  329   2          
  330   2          if(zero_crosses < 5){
  331   3              min_bemf_counts_up = TARGET_MIN_BEMF_COUNTS * 2;
  332   3            min_bemf_counts_down = TARGET_MIN_BEMF_COUNTS * 2;
  333   3          }else{
  334   3            min_bemf_counts_up = TARGET_MIN_BEMF_COUNTS;
  335   3            min_bemf_counts_down = TARGET_MIN_BEMF_COUNTS;
  336   3          }
  337   2      
  338   2          RELOAD_WATCHDOG_COUNTER();
  339   2          e_com_time = (commutation_intervals[0] + commutation_intervals[1] + 
  340   2                  commutation_intervals[2] + commutation_intervals[3] + 
  341   2                  commutation_intervals[4] + commutation_intervals[5]) >> 1;
  342   2      
  343   2          if (VARIABLE_PWM) {
  344   3            PWM_ARR = map(commutation_interval,96,200,PWM_MAX_ARR / 2,PWM_MAX_ARR);
  345   3          }
  346   2      
  347   2          if (signaltimecounter > (LOOP_FREQUENCY_HZ >> 1)) { // half second timeout when armed;
  348   3            static uint8_t xdata i;
  349   3            if (armed) {
  350   4              allOff();
  351   4              armed = 0;
  352   4              input = 0;
  353   4              inputSet = 0;
  354   4              zero_input_counter = 0;
  355   4              SET_DUTY_CYCLE_ALL(0);
  356   4              resetInputCaptureTimer();
  357   4              for (i = 0; i < 64; i++) {
  358   5                dma_buffer[i] = 0;
  359   5              }
  360   4              NVIC_SystemReset();
  361   4            }
  362   3            if (signaltimecounter > LOOP_FREQUENCY_HZ << 1) { // 2 second when not armed
  363   4              allOff();
  364   4              armed = 0;
  365   4              input = 0;
  366   4              inputSet = 0;
  367   4              zero_input_counter = 0;
  368   4              SET_DUTY_CYCLE_ALL(0);
  369   4              resetInputCaptureTimer();
  370   4              for (i = 0; i < 64; i++) {
  371   5                dma_buffer[i] = 0;
  372   5              }
  373   4              NVIC_SystemReset();
  374   4            }
  375   3          }
  376   2      
  377   2          if (twentykhzcounter > LOOP_FREQUENCY_HZ) { // 1s sample interval 10000
  378   3          //  consumed_current = (float) actual_current / 360 + consumed_current;
  379   3          //  switch (dshot_extended_telemetry) {
  380   3      
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 7   

  381   3          //  case 1:
  382   3          //    send_extended_dshot = (uint16_t) 2 << 8 | degrees_celsius;
  383   3          //    dshot_extended_telemetry = 2;
  384   3          //    break;
  385   3          //  case 2:
  386   3          //    send_extended_dshot = (uint16_t) 6 << 8
  387   3          //        | (uint8_t) actual_current / 50;
  388   3          //    dshot_extended_telemetry = 3;
  389   3          //    break;
  390   3          //  case 3:
  391   3          //    send_extended_dshot = (uint16_t) 4 << 8
  392   3          //        | (uint8_t) (battery_voltage / 25);
  393   3          //    dshot_extended_telemetry = 1;
  394   3          //    break;
  395   3          //  }
  396   3            twentykhzcounter = 0;
  397   3          }
  398   2      
  399   2          if ((zero_crosses > 1000) || (adjusted_input == 0)) {
  400   3            bemf_timeout_happened = 0;
  401   3          }
  402   2          if (zero_crosses > 100 && adjusted_input < 200) {
  403   3            bemf_timeout_happened = 0;
  404   3          }
  405   2          if (USE_SIN_START && adjusted_input < 160) {
  406   3            bemf_timeout_happened = 0;
  407   3          }
  408   2      
  409   2          if (adjusted_input < 150) { // startup duty cycle should be low enough to not burn motor
  410   3            bemf_timeout = 100;
  411   3          } else {
  412   3            bemf_timeout = 10;
  413   3          }
  414   2      
  415   2          average_interval = e_com_time / 3;
  416   2      
  417   2          if (desync_check && zero_crosses > 10) {
  418   3            if ((getAbsDif(last_average_interval, average_interval) > average_interval >> 1) && (average_interval 
             -< 2000)) { // throttle resitricted before zc 20.
*** WARNING C173 IN LINE 418 OF Src\main.c: '>': signed/unsigned type mismatch
  419   4              zero_crosses = 0;
  420   4              desync_happened++;
  421   4              if ((!BI_DIRECTION && (input > 47)) || commutation_interval > 1000) {
  422   5                running = 0;
  423   5              }
  424   4              old_routine = 1;
  425   4              if (zero_crosses > 100) {
  426   5                average_interval = 5000;
  427   5              }
  428   4              last_duty_cycle = min_startup_duty_cycle / 2;
  429   4            }
  430   3            desync_check = 0;
  431   3            last_average_interval = average_interval;
  432   3          }
  433   2      
  434   2          // if (dshot_telemetry && (commutation_interval > DSHOT_PRIORITY_THRESHOLD)) {
  435   2          //  PPWMBH = 1;
  436   2          //  PPWMB = 1;
  437   2      
  438   2          //  PCMPH = 1;
  439   2          //  PCMP = 0;
  440   2      
  441   2          //  // NVIC_SetPriority(IC_DMA_IRQ_NAME, 0);
  442   2          //  // NVIC_SetPriority(COM_TIMER_IRQ, 1);
  443   2          //  // NVIC_SetPriority(COMPARATOR_IRQ, 1);
  444   2          // } else {
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 8   

  445   2          //  PPWMBH = 1;
  446   2          //  PPWMB = 0;
  447   2      
  448   2          //  PCMPH = 1;
  449   2          //  PCMP = 1;
  450   2          //  // NVIC_SetPriority(IC_DMA_IRQ_NAME, 1);
  451   2          //  // NVIC_SetPriority(COM_TIMER_IRQ, 0);
  452   2          //  // NVIC_SetPriority(COMPARATOR_IRQ, 0);
  453   2          // }
  454   2      
  455   2          // if (send_telemetry) {
  456   2          //  makeTelemPackage(degrees_celsius, battery_voltage, actual_current, (uint16_t) consumed_current, e_r
             -pm);
  457   2          //  send_telem_DMA();
  458   2          //  send_telemetry = 0;
  459   2          // }
  460   2      
  461   2          // adc_counter++;
  462   2          // if (adc_counter > 200) { // for adc and telemetry
  463   2          //  ADC_DMA_Callback();
  464   2          //  // LL_ADC_REG_StartConversion(ADC1);
  465   2          //  // converted_degrees = __LL_ADC_CALC_TEMPERATURE(3300, ADC_raw_temp, LL_ADC_RESOLUTION_12B);
  466   2          //  degrees_celsius = converted_degrees;
  467   2          //  battery_voltage = ((7 * battery_voltage) + ((ADC_raw_volts * 3300 / 4095 * VOLTAGE_DIVIDER) / 100))
             - >> 3;
  468   2          //  smoothed_raw_current = getSmoothedCurrent();
  469   2          //  actual_current = ((smoothed_raw_current * 3300 / 41) - (CURRENT_OFFSET * 100)) / (MILLIVOLT_PER_AMP
             -);
  470   2          //  if (actual_current < 0) {
  471   2          //    actual_current = 0;
  472   2          //  }
  473   2          //  if (LOW_VOLTAGE_CUTOFF) {
  474   2          //    if (battery_voltage < (cell_counter * low_cell_volt_cutoff)) {
  475   2          //      low_voltage_count++;
  476   2          //      if (low_voltage_count > (20000 - (stepper_sine * 900))) {
  477   2          //        input = 0;
  478   2          //        allOff();
  479   2          //        maskPhaseInterrupts();
  480   2          //        running = 0;
  481   2          //        zero_input_count = 0;
  482   2          //        armed = 0;
  483   2          //      }
  484   2          //    } else {
  485   2          //      low_voltage_count = 0;
  486   2          //    }
  487   2          //  }
  488   2          //  adc_counter = 0;
  489   2          // }
  490   2      
  491   2          stuckcounter = 0;
  492   2          if(stepper_sine == 0) {
  493   3            e_rpm = running * (600000 / e_com_time); // in tens of rpm
  494   3            k_erpm = e_rpm / 10; // ecom time is time for one electrical revolution in microseconds
  495   3      
  496   3            if (low_rpm_throttle_limit) { // some hardware doesn't need this, its on
  497   4                            // by default to keep hardware / motors
  498   4                            // protected but can slow down the response
  499   4                            // in the very low end a little.
  500   4              maximum_duty_cycle = map(k_erpm, low_rpm_level, high_rpm_level,
  501   4                  throttle_max_at_low_rpm, throttle_max_at_high_rpm); // for more performance lower the
  502   4                                            // high_rpm_level, set to a
  503   4                                            // consvervative number in source.
  504   4            } else {
  505   4              maximum_duty_cycle = 2000;
  506   4            }
  507   3      
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 9   

  508   3            if (degrees_celsius > TEMPERATURE_LIMIT) {  
  509   4              maximum_duty_cycle = map(degrees_celsius,TEMPERATURE_LIMIT - 10, TEMPERATURE_LIMIT + 10,throttle_max_
             -at_high_rpm / 2, 1);
  510   4            }
  511   3      
  512   3            if (zero_crosses < 100 && commutation_interval > 500) {
  513   4              filter_level = 12;
  514   4            } else {
  515   4              filter_level = map(average_interval, 100, 500, 3, 12);
  516   4            }
  517   3      
  518   3            if (commutation_interval < 50) {
  519   4              filter_level = 2;
  520   4            }
  521   3      
  522   3            auto_advance_level = map(duty_cycle, 100, 2000, 13, 23);
  523   3            
  524   3            if (INTERVAL_TIMER_COUNT > 45000 && running == 1) {
  525   4              bemf_timeout_happened++;
  526   4      
  527   4              maskPhaseInterrupts();
  528   4              old_routine = 1;
  529   4              if (duty_cycle < 48) {
  530   5                running = 0;
  531   5                commutation_interval = 5000;
  532   5              }
  533   4              zero_crosses = 0;
  534   4              zcfoundroutine();
  535   4            }
  536   3          } else { // stepper sine
  537   3            if (input > 48 && armed) {
  538   4              if (input > 48 && input < 137) { // sine wave stepper
  539   5                if (do_once_sinemode) {
  540   6                  // disable commutation interrupt in case set
  541   6                  DISABLE_COM_TIMER_INT();
  542   6                  maskPhaseInterrupts();
  543   6                  SET_DUTY_CYCLE_ALL(0);
  544   6                  allpwm();
  545   6                  do_once_sinemode = 0;
  546   6                }
  547   5                advanceincrement();
  548   5                step_delay = map(input, 48, 120, 7000 / MOTOR_POLES, 810 / MOTOR_POLES);
  549   5                delayMicros(step_delay);
  550   5                e_rpm = 600 / step_delay; // in hundreds so 33 e_rpm is 3300 actual erpm
  551   5              } else {
  552   5                do_once_sinemode = 1;
  553   5                advanceincrement();
  554   5                if (input > 200) {
  555   6                  phase_A_position = 0;
  556   6                  step_delay = 80;
  557   6                }
  558   5                delayMicros(step_delay);
  559   5                if (phase_A_position == 0) {
  560   6                  stepper_sine = 0;
  561   6                  running = 1;
  562   6                  old_routine = 1;
  563   6                  commutation_interval = 9000;
  564   6                  average_interval = 9000;
  565   6                  last_average_interval = average_interval;
  566   6                  SET_INTERVAL_TIMER_COUNT(9000);
  567   6                  zero_crosses = 20;
  568   6                  prop_brake_active = 0;
  569   6                  step = changeover_step;
  570   6                  // comStep(step);// rising bemf on a same as position 0.
  571   6                  if (STALL_PROTECTION) {
  572   7                    last_duty_cycle = stall_protect_minimum_duty;
C251 COMPILER V5.04b,  main                                                                22/12/24  10:45:11  PAGE 10  

  573   7                  }
  574   6                  commutate();
  575   6                  generatePwmTimerEvent();
  576   6                }
  577   5              }
  578   4            } else {
  579   4              do_once_sinemode = 1;
  580   4              if (BRAKE_ON_STOP) {
  581   5                duty_cycle = (PWM_MAX_ARR - 19) + DRAG_BRAKE_STRENGTH * 2;
  582   5                adjusted_duty_cycle = PWM_MAX_ARR - ((duty_cycle * PWM_ARR) / PWM_MAX_ARR) + 1;
  583   5                proportionalBrake();
  584   5                SET_DUTY_CYCLE_ALL(adjusted_duty_cycle);
*** WARNING C188 IN LINE 584 OF Src\main.c: 'parameter 1': value truncated
  585   5                prop_brake_active = 1;
  586   5              } else {
  587   5                SET_DUTY_CYCLE_ALL(0);
  588   5                allOff();
  589   5              }
  590   4              e_rpm = 0;
  591   4            }
  592   3          }
  593   2        }
  594   1      }
  595          
  596          
  597          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2884     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       121     ------
  xdata-const size     =    ------     ------
  edata size           =        55     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       263     ------
End of Module Information.


C251 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
